{"version":3,"sources":["../index.js"],"names":["express","require","app","port","process","eventNames","PORT","mongodb","MongoClient","ObjectID","bodyParser","use","urlencoded","database","set","static","insert","db","collectionName","doc","Promise","resolve","reject","collection","err","result","find","filter","cursor","results","forEach","push","deleteOne","get","req","res","render","restaurantes","_id","params","id","redirect","lat","lng","query","command","geoNear","near","parseFloat","spherical","distanceMultiplier","console","log","send","positions","map","r","dis","obj","nome","loc","coordinates","postiions","post","restaurante","body","type","url","env","MONGOLAB_URI","connect","createIndex","listen"],"mappings":"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","file":"index.js","sourcesContent":["const express = require('express')\r\nconst app = express()\r\nconst port = process.eventNames.PORT || 3000\r\n\r\nconst mongodb = require('mongodb')\r\nconst MongoClient = mongodb.MongoClient\r\n\r\nconst ObjectID = mongodb.ObjectID\r\n\r\nconst bodyParser = require('body-parser')\r\n\r\napp.use(bodyParser.urlencoded())\r\n\r\nlet database = {}\r\n\r\napp.set('view engine', 'ejs')\r\napp.use(express.static('public'))\r\n\r\n\r\nconst insert = (db, collectionName, doc) => {\r\n\treturn new Promise ((resolve,reject) => {\r\n\t\tconst  collection = db.collection(collectionName)\r\n\t\tcollection.insert(doc, (err,result) => {\r\n\t\t\tif(err){\r\n\t\t\t\treject(err)\r\n\t\t\t}else{\r\n\t\t\t\tresolve(result)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\n\r\nconst find = (db, collectionName, filter) => {\r\n\treturn new Promise ((resolve,reject) => {\r\n\t\tconst  collection = db.collection(collectionName)\r\n\t\tconst cursor = collection.find(filter)\r\n\t\tconst results = []\r\n\t\tcursor.forEach( doc => results.push(doc),\r\n\t\t\terr => {\r\n\t\t\tif(err){\r\n\t\t\t\treject(err)\r\n\t\t\t}else{\r\n\t\t\t\tresolve(results)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\nconst deleteOne = (db, collectionName, filter) => {\r\n\treturn new Promise ((resolve,reject) => {\r\n\t\tconst  collection = db.collection(collectionName)\r\n\t\tcollection.deleteOne(filter, (err,results) => {\r\n\t\t\tif(err){\r\n\t\t\t\treject(err)\r\n\t\t\t}else{\r\n\t\t\t\tresolve(results)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\napp.get('/', (req,res) => res.render('index'))\r\n\r\napp.get('/restaurantes', async(req,res) => {\r\n\tconst restaurantes = await find(database, 'restaurantes', {})\r\n\tres.render('restaurantes', { restaurantes })\r\n})\r\n\r\napp.get('/restaurantes/novo', (req,res) => {\r\n\tres.render('restaurante_novo')\r\n})\r\n\r\napp.get('/restaurantes/delete/:id', async(req,res) => {\r\n\tawait deleteOne(database, 'restaurantes', {\r\n\t_id: ObjectID(req.params.id)\r\n})\r\nres.redirect('/restaurantes')\r\n})\r\n\r\n// Pegar distancia entre localização do cliente e dos restaurantes\r\napp.get('/restaurantes/distancia', (req,res) => {\r\n\tconst { lat, lng } = req.query\r\n\tif(!lat || !lng){\r\n\t\tres.render('restaurante_distancia_map')\r\n\t} else {\r\n\t\tdatabase.command({\r\n\t\t\tgeoNear: 'restaurantes',\r\n\t\t\tnear: [parseFloat(lng), parseFloat(lat)],\r\n\t\t\tspherical: true,\r\n\t\t\t// para pegar em metros\r\n\t\t\tdistanceMultiplier: 6378.1\r\n\t\t}, (err, results) => {\r\n\t\t\tconsole.log(err, results)\r\n\t\t\tres.render('restaurante_distancia', {\tresults, lat, lng\t})\r\n\t\t})\r\n\t}\r\n})\r\n\r\napp.get('/api/restaurantes/distancia', (req,res) => {\r\n\tconst { lat, lng } = req.query\r\n\tif(!lat || !lng){\r\n\t\tres.send([])\r\n\t} else {\r\n\t\tdatabase.command({\r\n\t\t\tgeoNear: 'restaurantes',\r\n\t\t\tnear: [parseFloat(lng), parseFloat(lat)],\r\n\t\t\tspherical: true,\r\n\t\t\t// para pegar em metros\r\n\t\t\tdistanceMultiplier: 6378.1\r\n\t\t}, (err, results) => {\r\n\t\t\tconst positions = results.results.map( r => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdis: r.obj.nome,\r\n\t\t\t\t\tlat: r.obj.loc.coordinates[1],\r\n\t\t\t\t\tlng: r.obj.loc.coordinates[0],\r\n\t\t\t\t\tdis: r.dis,\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tres.send(postiions)\r\n\t\t})\r\n\t}\r\n})\r\n\r\napp.post('/restaurantes/novo', async(req,res) => {\r\n\tconst restaurante = {\r\n\t\tnome: req.body.nome,\r\n\t\tloc:{\r\n\t\t\ttype: 'Point',\r\n\t\t\tcoordinates: [ parseFloat(req.body.lng), parseFloat(req.body.lat)]\r\n\t\t}\r\n\t}\r\n\tconsole.log(req.body)\r\n\tawait insert(database, 'restaurantes', restaurante)\r\n\tres.redirect('/restaurantes')\r\n})\r\n\r\n// MongoClient.connect('mongodb://localhost:27017/tanamesa', (err,db) => {\r\n\r\n\tconst url = process.env.MONGOLAB_URI;\r\n\r\nMongoClient.connect(url, (err,db) => {\r\n\tif (err){\r\n\t\tconsole.log('Erro ao conectar ao mongodb')\r\n\t}\r\n\telse{\r\n\t\tdatabase = db\r\n\r\n\t\tconst restaurantes = db.collection('restaurantes')\r\n\t\trestaurantes.createIndex({ loc: '2dsphere'})\r\n\r\n\tapp.listen(port, () => console.log('Ta na mesa server running'))\r\n\t}\r\n})\r\n\r\n\t\t// \"start\": \"./node_modules/.bin/babel-node index.js\","]}